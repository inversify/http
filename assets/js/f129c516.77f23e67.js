"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["1623"],{7553:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>h,toc:()=>f,default:()=>m,metadata:()=>r,assets:()=>x,contentTitle:()=>p});var r=JSON.parse('{"id":"ecosystem/better-auth/api/container-modules","title":"Container Modules","description":"Container modules provide a convenient way to set up Better Auth authentication in your InversifyJS dependency injection container. Each framework has its own specialized container module that automatically configures the necessary services, middleware, and controllers.","source":"@site/docs/ecosystem/better-auth/api/container-modules.mdx","sourceDirName":"ecosystem/better-auth/api","slug":"/ecosystem/better-auth/api/container-modules","permalink":"/http/docs/ecosystem/better-auth/api/container-modules","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Container Modules"},"sidebar":"tutorialSidebar","previous":{"title":"Parameter Decorators","permalink":"/http/docs/ecosystem/better-auth/api/decorators"},"next":{"title":"Logger","permalink":"/http/docs/ecosystem/logger"}}'),i=n(9970),s=n(7245),o=n(6460),a=n(5418),l=n(3324),d=n(4340),c=n(4801),u=n(445);let h={sidebar_position:4,title:"Container Modules"},p="Container Modules",x={},f=[{value:"Available Container Modules",id:"available-container-modules",level:2},{value:"<code>BetterAuthExpressContainerModule</code>",id:"betterauthexpresscontainermodule",level:3},{value:"<code>BetterAuthExpress4ContainerModule</code>",id:"betterauthexpress4containermodule",level:3},{value:"<code>BetterAuthFastifyContainerModule</code>",id:"betterauthfastifycontainermodule",level:3},{value:"<code>BetterAuthHonoContainerModule</code>",id:"betterauthhonocontainermodule",level:3},{value:"Factory Method: <code>fromOptions()</code>",id:"factory-method-fromoptions",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"What Gets Registered",id:"what-gets-registered",level:2},{value:"1. Better Auth Service",id:"1-better-auth-service",level:3},{value:"2. Better Auth Middleware",id:"2-better-auth-middleware",level:3},{value:"3. Better Auth Controller",id:"3-better-auth-controller",level:3},{value:"Service Identifiers",id:"service-identifiers",level:2},{value:"Type Parameters",id:"type-parameters",level:2},{value:"<code>TOptions</code>",id:"toptions",level:3},{value:"<code>TFactory</code>",id:"tfactory",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Related",id:"related",level:2}];function A(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"container-modules",children:"Container Modules"})}),"\n",(0,i.jsx)(t.p,{children:"Container modules provide a convenient way to set up Better Auth authentication in your InversifyJS dependency injection container. Each framework has its own specialized container module that automatically configures the necessary services, middleware, and controllers."}),"\n",(0,i.jsx)(t.h2,{id:"available-container-modules",children:"Available Container Modules"}),"\n",(0,i.jsx)(t.h3,{id:"betterauthexpresscontainermodule",children:(0,i.jsx)(t.code,{children:"BetterAuthExpressContainerModule"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Framework"}),": Express"]}),"\n",(0,i.jsx)(t.p,{children:"Sets up Better Auth for Express applications."}),"\n",(0,i.jsx)(u.A,{language:"typescript",children:o}),"\n",(0,i.jsx)(t.h3,{id:"betterauthexpress4containermodule",children:(0,i.jsx)(t.code,{children:"BetterAuthExpress4ContainerModule"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Framework"}),": Express v4"]}),"\n",(0,i.jsx)(t.p,{children:"Sets up Better Auth for Express v4 applications."}),"\n",(0,i.jsx)(u.A,{language:"typescript",children:a}),"\n",(0,i.jsx)(t.h3,{id:"betterauthfastifycontainermodule",children:(0,i.jsx)(t.code,{children:"BetterAuthFastifyContainerModule"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Framework"}),": Fastify"]}),"\n",(0,i.jsx)(t.p,{children:"Sets up Better Auth for Fastify applications."}),"\n",(0,i.jsx)(u.A,{language:"typescript",children:l}),"\n",(0,i.jsx)(t.h3,{id:"betterauthhonocontainermodule",children:(0,i.jsx)(t.code,{children:"BetterAuthHonoContainerModule"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Framework"}),": Hono"]}),"\n",(0,i.jsx)(t.p,{children:"Sets up Better Auth for Hono applications."}),"\n",(0,i.jsx)(u.A,{language:"typescript",children:d}),"\n",(0,i.jsxs)(t.h2,{id:"factory-method-fromoptions",children:["Factory Method: ",(0,i.jsx)(t.code,{children:"fromOptions()"})]}),"\n",(0,i.jsxs)(t.p,{children:["All container modules provide a static ",(0,i.jsx)(t.code,{children:"fromOptions()"})," method for easy instantiation:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"public static fromOptions<TOptions extends BetterAuthOptions>(\n  basePath: string,\n  betterAuth: BetterAuth<TOptions>,\n): ContainerModule<TOptions, () => BetterAuth<TOptions>>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"basePath"})," - The base URL path where Better Auth endpoints will be mounted (e.g., ",(0,i.jsx)(t.code,{children:"/api/auth"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"betterAuth"})," - A configured Better Auth instance"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(t.p,{children:"Returns a container module instance configured for the specific framework."}),"\n",(0,i.jsx)(t.h2,{id:"what-gets-registered",children:"What Gets Registered"}),"\n",(0,i.jsx)(t.p,{children:"When you load a Better Auth container module, it automatically registers the following services in your container:"}),"\n",(0,i.jsx)(t.h3,{id:"1-better-auth-service",children:"1. Better Auth Service"}),"\n",(0,i.jsx)(t.p,{children:"The core Better Auth instance is registered as a singleton service."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Service Identifier"}),": ",(0,i.jsx)(t.code,{children:"betterAuthServiceIdentifier"})]}),"\n",(0,i.jsx)(t.h3,{id:"2-better-auth-middleware",children:"2. Better Auth Middleware"}),"\n",(0,i.jsx)(t.p,{children:"Framework-specific middleware for handling authentication is registered as a singleton."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Service Identifier"}),": ",(0,i.jsx)(t.code,{children:"betterAuthMiddlewareServiceIdentifier"})]}),"\n",(0,i.jsx)(t.h3,{id:"3-better-auth-controller",children:"3. Better Auth Controller"}),"\n",(0,i.jsx)(t.p,{children:"A framework-specific controller that handles all Better Auth endpoints (sign-in, sign-up, sign-out, etc.) is registered."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Service Identifier"}),": ",(0,i.jsx)(t.code,{children:"betterAuthControllerServiceIdentifier"})]}),"\n",(0,i.jsx)(t.h2,{id:"service-identifiers",children:"Service Identifiers"}),"\n",(0,i.jsx)(t.p,{children:"You can import service identifiers from '@inversifyjs/http-better-auth'"}),"\n",(0,i.jsx)(u.A,{language:"typescript",children:c}),"\n",(0,i.jsx)(t.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsx)(t.p,{children:"All container modules are generic and accept the following type parameters:"}),"\n",(0,i.jsx)(t.h3,{id:"toptions",children:(0,i.jsx)(t.code,{children:"TOptions"})}),"\n",(0,i.jsxs)(t.p,{children:["Extends ",(0,i.jsx)(t.code,{children:"BetterAuthOptions"})," - captures your specific Better Auth configuration for type safety."]}),"\n",(0,i.jsx)(t.h3,{id:"tfactory",children:(0,i.jsx)(t.code,{children:"TFactory"})}),"\n",(0,i.jsxs)(t.p,{children:["A factory function type that produces a ",(0,i.jsx)(t.code,{children:"BetterAuth<TOptions>"})," instance. Usually ",(0,i.jsx)(t.code,{children:"() => BetterAuth<TOptions>"})," when using ",(0,i.jsx)(t.code,{children:"fromOptions()"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(t.p,{children:"Here's a complete example showing how to set up a Hono application with Better Auth:"}),"\n",(0,i.jsx)(u.A,{language:"typescript",children:"const options = {\n  database: new BetterSqlite3('./auth.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\nconst betterAuthInstance = betterAuth(options);\n\n// 2. Create container and load Better Auth module\nconst container: Container = new Container();\n\nconst betterAuthModule = BetterAuthHonoContainerModule.fromOptions(\n  '/api/auth',\n  betterAuthInstance,\n);\n\nawait container.load(betterAuthModule);\n\n// 3. Create a controller that uses authentication\n@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/profile')\n  public async getProfile(\n    @HonoUserSession() session: UserSession<typeof options>,\n  ): Promise<UserSession<typeof options>> {\n    return session;\n  }\n}\n\n// 4. Register your controllers\ncontainer.bind(UserController).toSelf();\n\n// 5. Build and run the application\nconst adapter = new InversifyHonoHttpAdapter(container);\nconst app = await adapter.build();"}),"\n",(0,i.jsx)(t.h2,{id:"related",children:"Related"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"../decorators",children:"Parameter Decorators"})," - For accessing session data in controllers"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"../better-auth",children:(0,i.jsx)(t.code,{children:"BetterAuth"})})," - The Better Auth instance type"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"../user-session",children:(0,i.jsx)(t.code,{children:"UserSession"})})," - The session data structure"]}),"\n"]})]})}function m(e={}){let{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(A,{...e})}):A(e)}},6460:function(e){e.exports="const container: Container = new Container();\n\nconst options = {\n  database: new BetterSqlite3('./path/to/database.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\nconst betterAuthInstance = betterAuth(options);\n\nconst betterAuthExpressContainerModule: BetterAuthExpressContainerModule<\n  typeof options,\n  () => BetterAuth<typeof options>\n> = BetterAuthExpressContainerModule.fromOptions(\n  '/api/auth',\n  betterAuthInstance,\n);\n\nawait container.load(betterAuthExpressContainerModule);\n\nconst adapter: InversifyExpressHttpAdapter = new InversifyExpressHttpAdapter(\n  container,\n  {\n    logger: true,\n    useCookies: true,\n  },\n);\n\nconst application: express.Application = await adapter.build();\n\napplication.listen();"},5418:function(e){e.exports="const container: Container = new Container();\n\nconst options = {\n  database: new BetterSqlite3('./path/to/database.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\nconst betterAuthInstance = betterAuth(options);\n\nconst betterAuthExpress4ContainerModule: BetterAuthExpress4ContainerModule<\n  typeof options,\n  () => BetterAuth<typeof options>\n> = BetterAuthExpress4ContainerModule.fromOptions(\n  '/api/auth',\n  betterAuthInstance,\n);\n\nawait container.load(betterAuthExpress4ContainerModule);\n\nconst adapter: InversifyExpressHttpAdapter = new InversifyExpressHttpAdapter(\n  container,\n  {\n    logger: true,\n    useCookies: true,\n  },\n);\n\nconst application: express.Application = await adapter.build();\n\napplication.listen();"},3324:function(e){e.exports="const container: Container = new Container();\n\nconst options = {\n  database: new BetterSqlite3('./path/to/database.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\nconst betterAuthInstance = betterAuth(options);\n\nconst betterAuthFastifyContainerModule: BetterAuthFastifyContainerModule<\n  typeof options,\n  () => BetterAuth<typeof options>\n> = BetterAuthFastifyContainerModule.fromOptions(\n  '/api/auth',\n  betterAuthInstance,\n);\n\nawait container.load(betterAuthFastifyContainerModule);\n\nconst adapter: InversifyFastifyHttpAdapter = new InversifyFastifyHttpAdapter(\n  container,\n  {\n    logger: true,\n    useCookies: true,\n  },\n);\n\nconst application = await adapter.build();\n\nawait application.listen();"},4340:function(e){e.exports="const container: Container = new Container();\n\nconst options = {\n  database: new BetterSqlite3('./path/to/database.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\nconst betterAuthInstance = betterAuth(options);\n\nconst betterAuthHonoContainerModule: BetterAuthHonoContainerModule<\n  typeof options,\n  () => BetterAuth<typeof options>\n> = BetterAuthHonoContainerModule.fromOptions(\n  '/api/auth',\n  betterAuthInstance,\n);\n\nawait container.load(betterAuthHonoContainerModule);\n\nconst adapter: InversifyHonoHttpAdapter = new InversifyHonoHttpAdapter(\n  container,\n  {\n    logger: true,\n  },\n);\n\nconst application = await adapter.build();\n\nserve(application);"},4801:function(e){e.exports="@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/profile')\n  public async getProfile(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}"}}]);