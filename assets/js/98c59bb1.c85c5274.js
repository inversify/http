"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["215"],{9917:function(e,t,r){r.r(t),r.d(t,{frontMatter:()=>p,toc:()=>o,default:()=>u,metadata:()=>n,assets:()=>l,contentTitle:()=>d});var n=JSON.parse('{"id":"fundamentals/pipe","title":"Pipe","description":"Pipes transform or validate individual parameters. They run immediately after a parameter is extracted from the request. A pipe can return a new value to replace the parameter, or throw an ErrorHttpResponse to stop processing.","source":"@site/docs/fundamentals/pipe.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/pipe","permalink":"/http/docs/fundamentals/pipe","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Pipe"},"sidebar":"tutorialSidebar","previous":{"title":"Middleware","permalink":"/http/docs/fundamentals/middleware"},"next":{"title":"Decorator","permalink":"/http/docs/api/decorators"}}'),i=r(9970),a=r(7245),s=r(445);let p={sidebar_position:6,title:"Pipe"},d="Pipe",l={},o=[{value:"execute",id:"execute",level:2},{value:"Example: Parse a number with validation",id:"example-parse-a-number-with-validation",level:2},{value:"Attaching pipes",id:"attaching-pipes",level:2}];function c(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"pipe",children:"Pipe"})}),"\n",(0,i.jsxs)(t.p,{children:["Pipes transform or validate individual parameters. They run immediately after a parameter is extracted from the request. A pipe can return a new value to replace the parameter, or throw an ",(0,i.jsx)(t.code,{children:"ErrorHttpResponse"})," to stop processing."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"interface Pipe<TInput = unknown, TOutput = unknown> {\n  execute(input: TInput, metadata: PipeMetadata): Promise<TOutput> | TOutput;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"execute",children:"execute"}),"\n",(0,i.jsxs)(t.p,{children:["Processes the input and returns the transformed value. If the input is invalid, throw an ",(0,i.jsx)(t.code,{children:"ErrorHttpResponse"})," to end the request early."]}),"\n",(0,i.jsx)(t.h2,{id:"example-parse-a-number-with-validation",children:"Example: Parse a number with validation"}),"\n",(0,i.jsxs)(t.p,{children:["A simple pipe that parses the input into a number and rejects invalid values with a ",(0,i.jsx)(t.code,{children:"400 Bad Request"}),"."]}),"\n",(0,i.jsx)(s.A,{language:"ts",children:"export class ParseNumberPipe implements Pipe<unknown, number> {\n  public execute(input: unknown): number {\n    const parsed: number = Number(input);\n\n    if (Number.isNaN(parsed)) {\n      throw new BadRequestHttpResponse('Invalid number');\n    }\n\n    return parsed;\n  }\n}"}),"\n",(0,i.jsx)(t.h2,{id:"attaching-pipes",children:"Attaching pipes"}),"\n",(0,i.jsxs)(t.p,{children:["Use parameter decorators to attach pipes where you need them. ",(0,i.jsx)(t.code,{children:"Body"}),", ",(0,i.jsx)(t.code,{children:"Params"}),", ",(0,i.jsx)(t.code,{children:"Query"}),", ",(0,i.jsx)(t.code,{children:"Headers"}),", ",(0,i.jsx)(t.code,{children:"Cookies"}),", ",(0,i.jsx)(t.code,{children:"Request"}),", and ",(0,i.jsx)(t.code,{children:"Response"})," all accept pipes."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Named parameter: ",(0,i.jsx)(t.code,{children:"@Params('id', ParseNumberPipe) id: number"})]}),"\n",(0,i.jsxs)(t.li,{children:["Whole object: ",(0,i.jsx)(t.code,{children:"@Query(ParseNumberPipe) query: QueryObject"})]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The adapter applies global pipes first, then parameter-level pipes, before calling your controller method."}),"\n",(0,i.jsxs)(t.p,{children:["Global pipes can be registered using the ",(0,i.jsx)(t.a,{href:"../../api/inversify-http-adapter#useglobalpipe",children:"InversifyHttpAdapter"}),"."]})]})}function u(e={}){let{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);