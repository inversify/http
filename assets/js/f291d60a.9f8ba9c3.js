"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["815"],{8492:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>h,toc:()=>m,default:()=>b,metadata:()=>t,assets:()=>f,contentTitle:()=>p});var t=JSON.parse('{"id":"ecosystem/better-auth/api/decorators","title":"Parameter Decorators","description":"Parameter decorators provide a convenient way to inject user session information directly into your controller methods. InversifyJS HTTP Better Auth provides framework-specific decorators that extract and parse authentication data from incoming requests.","source":"@site/docs/ecosystem/better-auth/api/decorators.mdx","sourceDirName":"ecosystem/better-auth/api","slug":"/ecosystem/better-auth/api/decorators","permalink":"/http/docs/ecosystem/better-auth/api/decorators","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Parameter Decorators"},"sidebar":"tutorialSidebar","previous":{"title":"UserSession","permalink":"/http/docs/ecosystem/better-auth/api/user-session"},"next":{"title":"Container Modules","permalink":"/http/docs/ecosystem/better-auth/api/container-modules"}}'),s=n(9970),i=n(7245),a=n(9156),o=n(4801),l=n(8785),u=n(445),d=n(3160),c=n(9218);let h={sidebar_position:3,title:"Parameter Decorators"},p="Parameter Decorators",f={},m=[{value:"Available Decorators",id:"available-decorators",level:2},{value:"Return Types",id:"return-types",level:2},{value:"Handling Authenticated Users",id:"handling-authenticated-users",level:3},{value:"Handling Optional Authentication",id:"handling-optional-authentication",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Related",id:"related",level:2}];function v(e){let r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"parameter-decorators",children:"Parameter Decorators"})}),"\n",(0,s.jsx)(r.p,{children:"Parameter decorators provide a convenient way to inject user session information directly into your controller methods. InversifyJS HTTP Better Auth provides framework-specific decorators that extract and parse authentication data from incoming requests."}),"\n",(0,s.jsx)(r.h2,{id:"available-decorators",children:"Available Decorators"}),"\n",(0,s.jsxs)(d.A,{children:[(0,s.jsx)(c.A,{value:"express",label:"Express & Express 4",children:(0,s.jsx)(u.A,{language:"typescript",children:"@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/profile')\n  public async getProfile(\n    @ExpressUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}"})}),(0,s.jsx)(c.A,{value:"fastify",label:"Fastify",children:(0,s.jsx)(u.A,{language:"typescript",children:"@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/profile')\n  public async getProfile(\n    @FastifyUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}"})}),(0,s.jsx)(c.A,{value:"hono",label:"Hono",children:(0,s.jsx)(u.A,{language:"typescript",children:o})})]}),"\n",(0,s.jsx)(r.admonition,{title:"Required middleware",type:"warning",children:(0,s.jsxs)(r.p,{children:["You must apply ",(0,s.jsx)(r.code,{children:"betterAuthMiddlewareServiceIdentifier"})," middleware to any controller relying on session decorators or apply ",(0,s.jsx)(r.code,{children:"betterAuthMiddlewareServiceIdentifier"})," as global middleware."]})}),"\n",(0,s.jsx)(r.h2,{id:"return-types",children:"Return Types"}),"\n",(0,s.jsx)(r.p,{children:"All decorators return either:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"UserSession<TOptions>"})," - When a valid session is found"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"null"})," - When no valid session is found"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"handling-authenticated-users",children:"Handling Authenticated Users"}),"\n",(0,s.jsx)(u.A,{language:"typescript",children:l}),"\n",(0,s.jsx)(r.h3,{id:"handling-optional-authentication",children:"Handling Optional Authentication"}),"\n",(0,s.jsx)(u.A,{language:"typescript",children:a}),"\n",(0,s.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(r.p,{children:"If the Better Auth middleware is not applied, the decorators will throw an error during request processing. Always ensure the middleware is properly configured:"}),"\n",(0,s.jsx)(u.A,{language:"typescript",children:"@Controller('/api')\nexport class BadController {\n  @Get('/profile')\n  public async getProfile(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>, // Error!\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}\n\n// \u2705 This works - middleware properly applied\n@ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n@Controller('/api')\nexport class GoodController {\n  @Get('/profile')\n  public async getProfile(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}"}),"\n",(0,s.jsx)(r.h2,{id:"related",children:"Related"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../user-session",children:(0,s.jsx)(r.code,{children:"UserSession"})})," - The session data structure"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../container-modules",children:"Container Modules"})," - For setting up Better Auth"]}),"\n"]})]})}function b(e={}){let{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}},9156:function(e){e.exports="@Controller('/api')\nclass OptionalAuthController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/optional-auth')\n  public async optionalAuth(\n    @HonoUserSession() session: UserSession<BetterAuthOptions> | null,\n  ): Promise<{ authenticated: boolean; userId?: string }> {\n    if (session === null) {\n      return { authenticated: false };\n    }\n\n    return {\n      authenticated: true,\n      userId: session.user.id,\n    };\n  }\n}"},4801:function(e){e.exports="@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/profile')\n  public async getProfile(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}"},8785:function(e){e.exports="@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/user-info')\n  public async getUserInfo(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<{ id: string; email: string; name: string }> {\n    return {\n      email: session.user.email,\n      id: session.user.id,\n      name: session.user.name,\n    };\n  }\n}"},9218:function(e,r,n){n.d(r,{A:()=>i});var t=n(9970);n(2714);var s=n(929);function i({children:e,hidden:r,className:n}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)("tabItem_hNGx",n),hidden:r,children:e})}},3160:function(e,r,n){n.d(r,{A:()=>y});var t=n(9970),s=n(2714),i=n(929),a=n(9679),o=n(5455),l=n(2328),u=n(4448),d=n(6961),c=n(6656);function h(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){let{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p({value:e,tabValues:r}){return r.some(r=>r.value===e)}var f=n(5636);function m({className:e,block:r,selectedValue:n,selectValue:s,tabValues:o}){let l=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),d=e=>{let r=e.currentTarget,t=o[l.indexOf(r)].value;t!==n&&(u(r),s(t))},c=e=>{let r=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{let n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1]}}r?.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},e),children:o.map(({value:e,label:r,attributes:s})=>(0,t.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:c,onClick:d,...s,className:(0,i.A)("tabs__item","tabItem_FBMP",s?.className,{"tabs__item--active":n===e}),children:r??e},e))})}function v({lazy:e,children:r,selectedValue:n}){let a=(Array.isArray(r)?r:[r]).filter(Boolean);if(e){let e=a.find(e=>e.props.value===n);return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:a.map((e,r)=>(0,s.cloneElement)(e,{key:r,hidden:e.props.value!==n}))})}function b(e){let r=function(e){let r,{defaultValue:n,queryString:t=!1,groupId:i}=e,a=function(e){let{values:r,children:n}=e;return(0,s.useMemo)(()=>{let e=r??h(n).map(({props:{value:e,label:r,attributes:n,default:t}})=>({value:e,label:r,attributes:n,default:t})),t=(0,d.XI)(e,(e,r)=>e.value===r.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[r,n])}(e),[f,m]=(0,s.useState)(()=>(function({defaultValue:e,tabValues:r}){if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let n=r.find(e=>e.default)??r[0];if(!n)throw Error("Unexpected error: 0 tabValues");return n.value})({defaultValue:n,tabValues:a})),[v,b]=function({queryString:e=!1,groupId:r}){let n=(0,o.W6)(),t=function({queryString:e=!1,groupId:r}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:e,groupId:r});return[(0,u.aZ)(t),(0,s.useCallback)(e=>{if(!t)return;let r=new URLSearchParams(n.location.search);r.set(t,e),n.replace({...n.location,search:r.toString()})},[t,n])]}({queryString:t,groupId:i}),[y,x]=function({groupId:e}){let r=e?`docusaurus.tab.${e}`:null,[n,t]=(0,c.Dv)(r);return[n,(0,s.useCallback)(e=>{r&&t.set(e)},[r,t])]}({groupId:i}),A=p({value:r=v??y,tabValues:a})?r:null;return(0,l.A)(()=>{A&&m(A)},[A]),{selectedValue:f,selectValue:(0,s.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw Error(`Can't select invalid tab value=${e}`);m(e),b(e),x(e)},[b,x,a]),tabValues:a}}(e);return(0,t.jsxs)("div",{className:(0,i.A)("tabs-container","tabList_urqy"),children:[(0,t.jsx)(m,{...r,...e}),(0,t.jsx)(v,{...r,...e})]})}function y(e){let r=(0,f.A)();return(0,t.jsx)(b,{...e,children:h(e.children)},String(r))}}}]);