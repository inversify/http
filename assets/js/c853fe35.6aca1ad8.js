"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["755"],{3319:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>a,toc:()=>c,default:()=>u,metadata:()=>t,assets:()=>d,contentTitle:()=>i});var t=JSON.parse('{"id":"fundamentals/controller","title":"Controller","description":"Controllers group request handlers for a feature area. A controller defines a base path and one or more route handlers using method decorators like Get, Post, etc.","source":"@site/docs/fundamentals/controller.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/controller","permalink":"/http/docs/fundamentals/controller","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Controller"},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/http/docs/introduction/getting-started"},"next":{"title":"Guard","permalink":"/http/docs/fundamentals/guard"}}'),o=n(4076),l=n(9221),s=n(7419);let a={sidebar_position:1,title:"Controller"},i="Controller",d={},c=[{value:"Basic example",id:"basic-example",level:2},{value:"Registering a controller",id:"registering-a-controller",level:2}];function h(e){let r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"controller",children:"Controller"})}),"\n",(0,o.jsxs)(r.p,{children:["Controllers group request handlers for a feature area. A controller defines a base path and one or more route handlers using method decorators like ",(0,o.jsx)(r.code,{children:"Get"}),", ",(0,o.jsx)(r.code,{children:"Post"}),", etc."]}),"\n",(0,o.jsx)(r.p,{children:"Key points"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Annotate classes with ",(0,o.jsx)(r.code,{children:"@Controller('/base')"})]}),"\n",(0,o.jsxs)(r.li,{children:["Add route handlers with decorators such as ",(0,o.jsx)(r.code,{children:"@Get()"}),", ",(0,o.jsx)(r.code,{children:"@Post()"}),", ",(0,o.jsx)(r.code,{children:"@Put()"}),", ..."]}),"\n",(0,o.jsx)(r.li,{children:"Controllers can have guards, middleware, and pipes at class or method level"}),"\n",(0,o.jsx)(r.li,{children:"Bind controllers to your Inversify container so the adapter can find them"}),"\n"]}),"\n",(0,o.jsx)(r.admonition,{title:"Controller and injectable decorators",type:"info",children:(0,o.jsxs)(r.p,{children:["You do not need to add ",(0,o.jsx)(r.code,{children:"@injectable()"}),"; the ",(0,o.jsx)(r.code,{children:"@Controller()"})," decorator already applies it for you"]})}),"\n",(0,o.jsx)(r.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,o.jsx)(r.p,{children:"A minimal controller with one route:"}),"\n",(0,o.jsx)(s.Z,{language:"ts",children:"@Controller('/messages')\nexport class MessagesController {\n  @Get('/hello')\n  public async sayHello(): Promise<Message> {\n    return { content: 'world' };\n  }\n}"}),"\n",(0,o.jsx)(r.h2,{id:"registering-a-controller",children:"Registering a controller"}),"\n",(0,o.jsx)(r.p,{children:"Controllers are discovered via reflect metadata but must also be registered in your container. Bind your controller class and choose a scope."}),"\n",(0,o.jsx)(s.Z,{language:"ts",children:"const container: Container = new Container();\n// Register the controller so the adapter can discover it\ncontainer.bind(MessagesController).toSelf().inSingletonScope();"}),"\n",(0,o.jsxs)(r.p,{children:["The adapter builds routes from controller metadata at runtime when you call ",(0,o.jsx)(r.code,{children:"build()"})," on your chosen server adapter. See the controller example integration test for a full end\u2011to\u2011end setup."]})]})}function u(e={}){let{wrapper:r}={...(0,l.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);