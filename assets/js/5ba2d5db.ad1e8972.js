"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["193"],{4303:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting started","href":"/http/docs/introduction/getting-started","docId":"introduction/getting-started","unlisted":false}]},{"type":"category","label":"Fundamentals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Controller","href":"/http/docs/fundamentals/controller","docId":"fundamentals/controller","unlisted":false},{"type":"link","label":"Error Filter","href":"/http/docs/fundamentals/error-filter","docId":"fundamentals/error-filter","unlisted":false},{"type":"link","label":"Guard","href":"/http/docs/fundamentals/guard","docId":"fundamentals/guard","unlisted":false},{"type":"link","label":"Interceptor","href":"/http/docs/fundamentals/interceptor","docId":"fundamentals/interceptor","unlisted":false},{"type":"link","label":"Middleware","href":"/http/docs/fundamentals/middleware","docId":"fundamentals/middleware","unlisted":false},{"type":"link","label":"Pipe","href":"/http/docs/fundamentals/pipe","docId":"fundamentals/pipe","unlisted":false}]},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Decorator","href":"/http/docs/api/decorators","docId":"api/decorators","unlisted":false},{"type":"link","label":"InversifyHttpAdapter","href":"/http/docs/api/inversify-http-adapter/","docId":"api/inversify-http-adapter/inversify-http-adapter","unlisted":false}]},{"type":"category","label":"Ecosystem","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Open API","href":"/http/docs/ecosystem/open-api","docId":"ecosystem/open-api","unlisted":false}]}]},"docs":{"api/decorators":{"id":"api/decorators","title":"Decorator","description":"This section covers Inversify HTTP decorators used to provide related metadata.","sidebar":"tutorialSidebar"},"api/inversify-http-adapter/inversify-http-adapter":{"id":"api/inversify-http-adapter/inversify-http-adapter","title":"InversifyHttpAdapter (Base Class)","description":"The base class all HTTP adapters extend (Express 4/5, Fastify, Hono, etc.). It wires controllers, guards, pipes, middleware, and interceptors into a working HTTP server. You generally consume its public methods from an adapter instance; if you are building a new adapter, implement the protected abstract methods described below.","sidebar":"tutorialSidebar"},"ecosystem/open-api":{"id":"ecosystem/open-api","title":"Open API","description":"The @inversifyjs/http-open-api package provides comprehensive OpenAPI 3.1 integration for InversifyJS HTTP applications. This powerful library enables you to automatically generate OpenAPI specifications and interactive Swagger UI documentation directly from your TypeScript controllers and schemas.","sidebar":"tutorialSidebar"},"fundamentals/controller":{"id":"fundamentals/controller","title":"Controller","description":"Controllers are classes annotated with the @Controller() decorator. They group request handlers for a feature area. A controller defines a base path and one or more route handlers using method decorators.","sidebar":"tutorialSidebar"},"fundamentals/error-filter":{"id":"fundamentals/error-filter","title":"Error Filter","description":"Error filters allow you to catch and process errors that occur during request handling. They provide a centralized way to transform application errors into appropriate HTTP responses, keeping your controllers clean and focused on business logic.","sidebar":"tutorialSidebar"},"fundamentals/guard":{"id":"fundamentals/guard","title":"Guard","description":"Guards decide whether a request can continue. They run before middleware and handlers.","sidebar":"tutorialSidebar"},"fundamentals/interceptor":{"id":"fundamentals/interceptor","title":"Interceptor","description":"Interceptors run around your route handler\u2014before it executes and after it completes. They can inspect the request/response, short-circuit the flow, and even transform the handler result.","sidebar":"tutorialSidebar"},"fundamentals/middleware":{"id":"fundamentals/middleware","title":"Middleware","description":"Middleware run before or after your controller method, depending on the phase where you register them. They receive the native request/response types of the adapter you use.","sidebar":"tutorialSidebar"},"fundamentals/pipe":{"id":"fundamentals/pipe","title":"Pipe","description":"Pipes transform or validate individual parameters. They run immediately after a parameter is extracted from the request. A pipe can return a new value to replace the parameter, or throw an ErrorHttpResponse to stop processing.","sidebar":"tutorialSidebar"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting started","description":"Install dependencies","sidebar":"tutorialSidebar"}}}}')}}]);