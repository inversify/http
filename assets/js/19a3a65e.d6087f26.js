"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["863"],{1007:function(r,e,t){t.r(e),t.d(e,{frontMatter:()=>l,toc:()=>c,default:()=>p,metadata:()=>o,assets:()=>d,contentTitle:()=>a});var o=JSON.parse('{"id":"fundamentals/error-filter","title":"Error Filter","description":"Error filters allow you to catch and process errors that occur during request handling. They provide a centralized way to transform application errors into appropriate HTTP responses, keeping your controllers clean and focused on business logic.","source":"@site/docs/fundamentals/error-filter.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/error-filter","permalink":"/http/docs/fundamentals/error-filter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Error Filter"},"sidebar":"tutorialSidebar","previous":{"title":"Controller","permalink":"/http/docs/fundamentals/controller"},"next":{"title":"Guard","permalink":"/http/docs/fundamentals/guard"}}'),n=t(9970),i=t(7245),s=t(938);let l={sidebar_position:2,title:"Error Filter"},a="Error Filter",d={},c=[{value:"How Error Filters Work",id:"how-error-filters-work",level:2},{value:"Basic Example",id:"basic-example",level:2},{value:"Custom Error",id:"custom-error",level:3},{value:"Error Filter",id:"error-filter-1",level:3},{value:"Controller",id:"controller",level:3},{value:"Attaching error filters",id:"attaching-error-filters",level:2}];function h(r){let e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"error-filter",children:"Error Filter"})}),"\n",(0,n.jsx)(e.p,{children:"Error filters allow you to catch and process errors that occur during request handling. They provide a centralized way to transform application errors into appropriate HTTP responses, keeping your controllers clean and focused on business logic."}),"\n",(0,n.jsx)(e.admonition,{title:"Error filter and injectable decorators",type:"info",children:(0,n.jsxs)(e.p,{children:["You don't need to add ",(0,n.jsx)(e.code,{children:"@injectable()"}),". The ",(0,n.jsx)(e.code,{children:"@CatchError()"})," decorator already applies it for you."]})}),"\n",(0,n.jsx)(e.h2,{id:"how-error-filters-work",children:"How Error Filters Work"}),"\n",(0,n.jsxs)(e.p,{children:["Error filters are classes that implement the ",(0,n.jsx)(e.code,{children:"ErrorFilter"})," interface and are decorated with ",(0,n.jsx)(e.code,{children:"@CatchError()"}),". When an error occurs during request processing, Inversify HTTP looks for error filters that can handle that specific error type and delegates the error handling to them."]}),"\n",(0,n.jsx)(e.p,{children:"The error filter can then:"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"Transform the error into an appropriate HTTP response"}),"\n",(0,n.jsx)(e.li,{children:"Log the error for debugging purposes"}),"\n",(0,n.jsx)(e.li,{children:"Add context or sanitize error messages"}),"\n",(0,n.jsx)(e.li,{children:"Return custom error responses based on the error type"}),"\n"]}),"\n",(0,n.jsx)(e.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,n.jsx)(e.p,{children:"Here's a complete example showing how to create a custom error, an error filter to handle it, and a controller that uses the error filter:"}),"\n",(0,n.jsx)(e.h3,{id:"custom-error",children:"Custom Error"}),"\n",(0,n.jsx)(e.p,{children:"First, create a custom error class:"}),"\n",(0,n.jsx)(s.A,{language:"ts",children:"export class InvalidOperationError extends Error {\n  constructor(message: string = 'Invalid operation', options?: ErrorOptions) {\n    super(`[InvalidOperationError]: ${message}`, options);\n  }\n}"}),"\n",(0,n.jsx)(e.h3,{id:"error-filter-1",children:"Error Filter"}),"\n",(0,n.jsx)(e.p,{children:"Create an error filter that catches the custom error and returns an appropriate HTTP response:"}),"\n",(0,n.jsx)(s.A,{language:"ts",children:"@CatchError(InvalidOperationError)\nexport class InvalidOperationErrorFilter\n  implements ErrorFilter<InvalidOperationError>\n{\n  public catch(error: InvalidOperationError): void {\n    throw new UnprocessableEntityHttpResponse(error.message, undefined, {\n      cause: error,\n    });\n  }\n}"}),"\n",(0,n.jsx)(e.h3,{id:"controller",children:"Controller"}),"\n",(0,n.jsxs)(e.p,{children:["Apply the error filter to a controller using the ",(0,n.jsx)(e.code,{children:"@UseErrorFilter()"})," decorator:"]}),"\n",(0,n.jsx)(s.A,{language:"ts",children:"@Controller('/products')\n@UseErrorFilter(InvalidOperationErrorFilter)\nexport class ProductController {\n  @Get('/:id/validate')\n  public async validateProduct(): Promise<void> {\n    throw new InvalidOperationError('Product validation failed');\n  }\n}"}),"\n",(0,n.jsx)(e.h2,{id:"attaching-error-filters",children:"Attaching error filters"}),"\n",(0,n.jsxs)(e.p,{children:["Use the ",(0,n.jsx)(e.a,{href:"../../api/decorators#useerrorfilter",children:"UseErrorFilter"})," decorator at the controller level (applies to all routes) or at the method level (applies to one route)."]}),"\n",(0,n.jsxs)(e.p,{children:["Global error filters can be registered using the ",(0,n.jsx)(e.a,{href:"../../api/inversify-http-adapter#useglobalfilters",children:"InversifyHttpAdapter"}),"."]})]})}function p(r={}){let{wrapper:e}={...(0,i.R)(),...r.components};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}}}]);