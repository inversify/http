"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["5768"],{7440:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>c,toc:()=>p,default:()=>x,metadata:()=>i,assets:()=>u,contentTitle:()=>h});var i=JSON.parse('{"id":"ecosystem/better-auth/api/user-session","title":"UserSession","description":"The UserSession interface provides type-safe access to the current user and session information from Better Auth.","source":"@site/docs/ecosystem/better-auth/api/user-session.mdx","sourceDirName":"ecosystem/better-auth/api","slug":"/ecosystem/better-auth/api/user-session","permalink":"/http/docs/ecosystem/better-auth/api/user-session","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"UserSession"},"sidebar":"tutorialSidebar","previous":{"title":"BetterAuth","permalink":"/http/docs/ecosystem/better-auth/api/better-auth"},"next":{"title":"Parameter Decorators","permalink":"/http/docs/ecosystem/better-auth/api/decorators"}}'),r=n(9970),t=n(7245),o=n(9156),l=n(4801),a=n(8785),d=n(445);let c={sidebar_position:2,title:"UserSession"},h="UserSession",u={},p=[{value:"Interface Definition",id:"interface-definition",level:2},{value:"Description",id:"description",level:2},{value:"Type Parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>session</code>",id:"session",level:3},{value:"<code>user</code>",id:"user",level:3},{value:"Usage",id:"usage",level:2},{value:"With Parameter Decorators",id:"with-parameter-decorators",level:3},{value:"Accessing User Information",id:"accessing-user-information",level:3},{value:"Accessing Session Information",id:"accessing-session-information",level:3},{value:"Handling Unauthenticated Requests",id:"handling-unauthenticated-requests",level:3},{value:"Type Safety Benefits",id:"type-safety-benefits",level:2},{value:"Framework Support",id:"framework-support",level:2},{value:"Related",id:"related",level:2}];function f(e){let s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"usersession",children:"UserSession"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"UserSession"})," interface provides type-safe access to the current user and session information from Better Auth."]}),"\n",(0,r.jsx)(s.h2,{id:"interface-definition",children:"Interface Definition"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:"import {\n  BetterAuthOptions,\n  InferSession,\n  InferUser,\n  PrettifyDeep,\n} from 'better-auth';\n\nexport interface UserSession<TOptions extends BetterAuthOptions> {\n  session: PrettifyDeep<InferSession<TOptions>>;\n  user: PrettifyDeep<InferUser<TOptions>>;\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UserSession<TOptions>"})," is a generic interface that combines user and session information from Better Auth into a single object. It leverages Better Auth's type inference system to provide accurate typing based on your specific configuration, including any plugins or custom fields you've defined."]}),"\n",(0,r.jsx)(s.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"TOptions"})," - Extends ",(0,r.jsx)(s.code,{children:"BetterAuthOptions"})," from the Better Auth library. This parameter ensures that the user and session types match your Better Auth configuration exactly."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"session",children:(0,r.jsx)(s.code,{children:"session"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type"}),": ",(0,r.jsx)(s.code,{children:"PrettifyDeep<InferSession<TOptions>>"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Description"}),": Contains the current session information, including session ID, user ID, expiration, and any additional session fields defined by your configuration or plugins."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"user",children:(0,r.jsx)(s.code,{children:"user"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type"}),": ",(0,r.jsx)(s.code,{children:"PrettifyDeep<InferUser<TOptions>>"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Description"}),": Contains the current user information, including user ID, email, name, and any additional user fields defined by your configuration or plugins."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(s.h3,{id:"with-parameter-decorators",children:"With Parameter Decorators"}),"\n",(0,r.jsxs)(s.p,{children:["The most common way to access ",(0,r.jsx)(s.code,{children:"UserSession"})," is through parameter decorators in your controllers:"]}),"\n",(0,r.jsx)(d.A,{language:"typescript",children:l}),"\n",(0,r.jsx)(s.h3,{id:"accessing-user-information",children:"Accessing User Information"}),"\n",(0,r.jsx)(d.A,{language:"typescript",children:a}),"\n",(0,r.jsx)(s.h3,{id:"accessing-session-information",children:"Accessing Session Information"}),"\n",(0,r.jsx)(d.A,{language:"typescript",children:"@Controller('/api')\nclass SessionController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/session-info')\n  public async getSessionInfo(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<{ sessionId: string; userId: string; expiresAt: Date }> {\n    return {\n      expiresAt: session.session.expiresAt,\n      sessionId: session.session.id,\n      userId: session.session.userId,\n    };\n  }\n}"}),"\n",(0,r.jsx)(s.h3,{id:"handling-unauthenticated-requests",children:"Handling Unauthenticated Requests"}),"\n",(0,r.jsxs)(s.p,{children:["When no valid session is found, the ",(0,r.jsx)(s.code,{children:"UserSession"})," will be ",(0,r.jsx)(s.code,{children:"null"}),":"]}),"\n",(0,r.jsx)(d.A,{language:"typescript",children:o}),"\n",(0,r.jsx)(s.h2,{id:"type-safety-benefits",children:"Type Safety Benefits"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Configuration-Aware"}),": Types reflect your exact Better Auth configuration"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Plugin Integration"}),": Includes types for any Better Auth plugins you've enabled"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Custom Fields"}),": Supports custom user and session fields"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Null Safety"}),": Properly handles unauthenticated states"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"framework-support",children:"Framework Support"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UserSession"})," is available across all supported frameworks through their respective parameter decorators:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Express"}),": Use ",(0,r.jsx)(s.code,{children:"@ExpressUserSession()"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Express v4"}),": Use ",(0,r.jsx)(s.code,{children:"@ExpressUserSession()"})," (same decorator as Express)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Fastify"}),": Use ",(0,r.jsx)(s.code,{children:"@FastifyUserSession()"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Hono"}),": Use ",(0,r.jsx)(s.code,{children:"@HonoUserSession()"})]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"related",children:"Related"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"../decorators",children:"Parameter Decorators"})," - For accessing UserSession in controllers"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"../container-modules",children:"Container Modules"})," - For setting up Better Auth authentication"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"../better-auth",children:(0,r.jsx)(s.code,{children:"BetterAuth"})})," - The Better Auth instance type"]}),"\n"]})]})}function x(e={}){let{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},9156:function(e){e.exports="@Controller('/api')\nclass OptionalAuthController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/optional-auth')\n  public async optionalAuth(\n    @HonoUserSession() session: UserSession<BetterAuthOptions> | null,\n  ): Promise<{ authenticated: boolean; userId?: string }> {\n    if (session === null) {\n      return { authenticated: false };\n    }\n\n    return {\n      authenticated: true,\n      userId: session.user.id,\n    };\n  }\n}"},4801:function(e){e.exports="@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/profile')\n  public async getProfile(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<UserSession<BetterAuthOptions>> {\n    return session;\n  }\n}"},8785:function(e){e.exports="@Controller('/api')\nclass UserController {\n  @ApplyMiddleware(betterAuthMiddlewareServiceIdentifier)\n  @Get('/user-info')\n  public async getUserInfo(\n    @HonoUserSession() session: UserSession<BetterAuthOptions>,\n  ): Promise<{ id: string; email: string; name: string }> {\n    return {\n      email: session.user.email,\n      id: session.user.id,\n      name: session.user.name,\n    };\n  }\n}"}}]);