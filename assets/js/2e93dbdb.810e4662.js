"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["3817"],{8204:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,toc:()=>l,default:()=>u,metadata:()=>s,assets:()=>d,contentTitle:()=>h});var s=JSON.parse('{"id":"ecosystem/better-auth/api/better-auth","title":"BetterAuth","description":"The BetterAuth type represents a configured Better Auth instance with full type safety based on the provided options.","source":"@site/docs/ecosystem/better-auth/api/better-auth.mdx","sourceDirName":"ecosystem/better-auth/api","slug":"/ecosystem/better-auth/api/better-auth","permalink":"/http/docs/ecosystem/better-auth/api/better-auth","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"BetterAuth"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/http/docs/ecosystem/better-auth/introduction"},"next":{"title":"UserSession","permalink":"/http/docs/ecosystem/better-auth/api/user-session"}}'),i=n(9970),r=n(7245),a=n(445);let o={sidebar_position:1,title:"BetterAuth"},h="BetterAuth",d={},l=[{value:"Type Definition",id:"type-definition",level:2},{value:"Description",id:"description",level:2},{value:"Type Parameters",id:"type-parameters",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Container Modules",id:"with-container-modules",level:3},{value:"Type Safety Benefits",id:"type-safety-benefits",level:2},{value:"Related Types",id:"related-types",level:2}];function c(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"betterauth",children:"BetterAuth"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"BetterAuth"})," type represents a configured Better Auth instance with full type safety based on the provided options."]}),"\n",(0,i.jsx)(t.h2,{id:"type-definition",children:"Type Definition"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import { betterAuth, BetterAuthOptions } from 'better-auth';\n\nexport type BetterAuth<TOptions extends BetterAuthOptions> = ReturnType<\n  typeof betterAuth<TOptions>\n>;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"BetterAuth<TOptions>"})," is a generic type that wraps the return type of the Better Auth library's ",(0,i.jsx)(t.code,{children:"betterAuth"})," function. It preserves the type information from your Better Auth configuration, ensuring that all authentication features and plugins are properly typed throughout your application."]}),"\n",(0,i.jsx)(t.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TOptions"})," - Extends ",(0,i.jsx)(t.code,{children:"BetterAuthOptions"})," from the Better Auth library. This parameter captures your specific Better Auth configuration, including enabled authentication methods, plugins, and database settings."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(a.A,{language:"typescript",children:"const options = {\n  database: new BetterSqlite3('./auth.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\n// Type-safe Better Auth instance\nconst auth: BetterAuth<typeof options> = betterAuth(options);"}),"\n",(0,i.jsx)(t.h3,{id:"with-container-modules",children:"With Container Modules"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"BetterAuth"})," type is commonly used with container modules to ensure type safety when setting up authentication in your dependency injection container:"]}),"\n",(0,i.jsx)(a.A,{language:"typescript",children:"const options = {\n  database: new BetterSqlite3('./auth.db'),\n  emailAndPassword: {\n    enabled: true,\n  },\n} as const satisfies BetterAuthOptions;\n\nconst container: Container = new Container();\n\nconst betterAuthInstance: BetterAuth<typeof options> = betterAuth(options);\n\nconst containerModule: BetterAuthExpressContainerModule<\n  typeof options,\n  () => BetterAuth<typeof options>\n> = BetterAuthExpressContainerModule.fromOptions(\n  '/api/auth',\n  betterAuthInstance,\n);\n\nawait container.load(containerModule);"}),"\n",(0,i.jsx)(t.h2,{id:"type-safety-benefits",children:"Type Safety Benefits"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Configuration Inference"}),": The type preserves your exact Better Auth configuration"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Method Availability"}),": Ensures only configured authentication methods are available"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Database Schema"}),": Reflects your database schema and user/session types"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"related-types",children:"Related Types"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"../user-session",children:(0,i.jsx)(t.code,{children:"UserSession"})})," - For accessing user and session information"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"../container-modules",children:"Container Modules"})," - For setting up Better Auth with InversifyJS"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"../decorators",children:"Parameter Decorators"})," - For accessing authentication data in controllers"]}),"\n"]})]})}function u(e={}){let{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);