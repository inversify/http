"use strict";(self.webpackChunk_inversifyjs_inversify_http_docs_site=self.webpackChunk_inversifyjs_inversify_http_docs_site||[]).push([["2303"],{391:function(e,i,a){a.r(i),a.d(i,{frontMatter:()=>o,toc:()=>c,default:()=>h,metadata:()=>t,assets:()=>d,contentTitle:()=>l});var t=JSON.parse('{"id":"ecosystem/validation","title":"Validation","description":"The @inversifyjs/http-validation package ecosystem provides comprehensive validation capabilities for InversifyJS HTTP applications. This powerful set of libraries enables you to validate request data using various validation approaches, from JSON Schema to decorator-based validation to modern TypeScript-first schema libraries.","source":"@site/docs/ecosystem/validation.mdx","sourceDirName":"ecosystem","slug":"/ecosystem/validation","permalink":"/http/docs/ecosystem/validation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Validation"},"sidebar":"tutorialSidebar","previous":{"title":"Open API","permalink":"/http/docs/ecosystem/open-api"}}'),s=a(9970),n=a(7245),r=a(424);let o={sidebar_position:4,title:"Validation"},l,d={},c=[{value:"Features",id:"features",level:2},{value:"Validation Options",id:"validation-options",level:2},{value:"Standard Schema Integration",id:"standard-schema-integration",level:3},{value:"Ajv (JSON Schema)",id:"ajv-json-schema",level:3},{value:"Class-validator",id:"class-validator",level:3},{value:"Getting Started",id:"getting-started",level:2}];function p(e){let i={h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.strong,{children:"@inversifyjs/http-validation"})," package ecosystem provides comprehensive validation capabilities for InversifyJS HTTP applications. This powerful set of libraries enables you to validate request data using various validation approaches, from JSON Schema to decorator-based validation to modern TypeScript-first schema libraries."]}),"\n",(0,s.jsx)(i.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Multiple Validation Approaches"}),": Support for Ajv (JSON Schema), class-validator (decorator-based), and Standard Schema (Zod, Valibot, ArkType, and more)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Decorator-based Integration"}),": Use TypeScript decorators to apply validation rules directly to your controller methods and parameters"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Type-safe Validation"}),": Full TypeScript support with compile-time type checking and runtime validation"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Automatic Error Handling"}),": Built-in error filters that automatically transform validation errors into proper HTTP responses"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Framework Agnostic"}),": Works with Express, Fastify, Hono, and other supported HTTP frameworks"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Performance Optimized"}),": Compiled validation pipes for optimal runtime performance"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"validation-options",children:"Validation Options"}),"\n",(0,s.jsx)(i.h3,{id:"standard-schema-integration",children:"Standard Schema Integration"}),"\n",(0,s.jsxs)(i.p,{children:["Use modern TypeScript-first schema libraries like ",(0,s.jsx)(i.strong,{children:"Zod"}),", ",(0,s.jsx)(i.strong,{children:"Valibot"}),", or ",(0,s.jsx)(i.strong,{children:"ArkType"})," through the Standard Schema interface. This approach provides excellent TypeScript integration and developer experience."]}),"\n",(0,s.jsx)(i.h3,{id:"ajv-json-schema",children:"Ajv (JSON Schema)"}),"\n",(0,s.jsxs)(i.p,{children:["Validate data against ",(0,s.jsx)(i.strong,{children:"JSON Schema"})," definitions using the fast and widely-adopted Ajv validator. Perfect for API validation with standardized schema definitions."]}),"\n",(0,s.jsx)(i.h3,{id:"class-validator",children:"Class-validator"}),"\n",(0,s.jsxs)(i.p,{children:["Use ",(0,s.jsx)(i.strong,{children:"decorator-based validation"})," directly on TypeScript classes with class-validator. This approach allows you to define validation rules as annotations on class properties."]}),"\n",(0,s.jsx)(i.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(i.p,{children:"To learn more about using validation in your InversifyJS HTTP applications, including detailed examples, configuration guides, and API references for each validation approach, visit the comprehensive documentation:"}),"\n",(0,s.jsx)(r.A,{href:"https://inversify.io/validation/",target:"_blank",children:(0,s.jsx)("span",{children:"View Full Documentation"})}),"\n",(0,s.jsx)(i.p,{children:"The documentation includes step-by-step setup guides, validation decorator references, and complete examples showing how to build robust, validated APIs with automatic error handling."})]})}function h(e={}){let{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},424:function(e,i,a){a.d(i,{A:()=>n});var t=a(9970),s=a(941);a(2714);function n({href:e,children:i,target:a}){return(0,t.jsx)("div",{className:"buttonContainer_jyGP",children:(0,t.jsxs)(s.A,{to:e,target:a,rel:"noopener noreferrer",className:"documentationButton_Sex6",children:[(0,t.jsx)("span",{className:"buttonText_NSOW",children:i}),(0,t.jsx)("span",{className:"buttonIcon_fV4z",children:"\uD83D\uDCD6"}),(0,t.jsx)("div",{className:"shimmer_GGMR"})]})})}}}]);